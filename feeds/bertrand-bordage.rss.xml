<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bertrand Bordage</title><link>http://blog.bordage.pro/</link><description>Python libs &amp; optimization</description><atom:link href="http://blog.bordage.pro/feeds/bertrand-bordage.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 23 Feb 2015 00:00:00 +0100</lastBuildDate><item><title>Django-cachalot 1.0.0 release candidate</title><link>http://blog.bordage.pro/django-cachalot-rc/</link><description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I’m Bertrand, the creator of &lt;a class="reference external" href="https://github.com/BertrandBordage/django-cachalot"&gt;django-cachalot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s been 5 months since I started this project,
and it’s now ready for a safe production use.
However, I want cachalot to be perfect.&lt;/p&gt;
&lt;p&gt;That’s why I just uploaded to PyPI a release candidate for cachalot 1.0.0.
&lt;strong&gt;I need your help to test it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can even &lt;strong&gt;earn 30 €&lt;/strong&gt; by reporting an invalidation issue!
But you have to be quick: 1.0.0 will be released &lt;strong&gt;15 March 2015&lt;/strong&gt;
if no invalidation issue is found.&lt;/p&gt;
&lt;p&gt;I need you to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://django-cachalot.readthedocs.org/en/latest/quickstart.html"&gt;install cachalot&lt;/a&gt; on your development server&lt;/li&gt;
&lt;li&gt;open a page of your project where you use a complex query&lt;/li&gt;
&lt;li&gt;change something that should change the displayed result of the complex query&lt;/li&gt;
&lt;li&gt;refresh the page with the complex query to see if the displayed result has changed as expected&lt;/li&gt;
&lt;li&gt;if not, &lt;a class="reference external" href="https://github.com/BertrandBordage/django-cachalot/issues/new"&gt;create a new GitHub issue&lt;/a&gt;
with a minimal example, and I’ll send you 30 € if I or someone else
can reproduce the bug&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Regards,&lt;/div&gt;
&lt;div class="line"&gt;Bertrand&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bertrand Bordage</dc:creator><pubDate>Mon, 23 Feb 2015 00:00:00 +0100</pubDate><guid>tag:blog.bordage.pro,2015-02-23:django-cachalot-rc/</guid><category>django</category><category>django-cachalot</category></item><item><title>Baidu illegal activities</title><link>http://blog.bordage.pro/baidu-illegal-activities/</link><description>&lt;div class="section" id="the-facts"&gt;
&lt;h2&gt;The facts&lt;/h2&gt;
&lt;div class="section" id="whats-baidu"&gt;
&lt;h3&gt;What’s Baidu?&lt;/h3&gt;
&lt;p&gt;Baidu is &lt;a class="reference external" href="http://chineseseoshifu.com/blog/top-5-chinese-search-engines.html"&gt;the most widely&lt;/a&gt;
used search engine in China.
As far as I know, it’s as popular in China as Google is in western countries.
Like any other search engine, Baidu has thousands of bots crawling the web
in order to index everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-why-do-i-care-about-it"&gt;
&lt;h3&gt;And why do I care about it?&lt;/h3&gt;
&lt;p&gt;In my daily job, I read dozens of log entries reporting errors, dead links, and
suspicious operations.  In my case, suspicious operations means attempts of
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Spoofing_attack"&gt;IP &amp;amp; referer spoofing&lt;/a&gt;,
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Denial-of-service_attack"&gt;(D)DOS&lt;/a&gt;,
and vulnerable software discovery.  The latter means that a bot or someone asks
for pages containing a proof that you use a given version of WordPress, VTiger,
PHPMyAdmin, or any other widely used and quite vulnerable tool.&lt;/p&gt;
&lt;p&gt;Most of the time, those reports are triggered by search engine bots like
Google, Bing, Yahoo, or the awful
&lt;abbr title="Bibliothèque nationale de France"&gt;BnF&lt;/abbr&gt; bot (it fails to rebuild a lot
of URLs from relative links…).&lt;/p&gt;
&lt;p&gt;Being indexed by a search engine is generally considered as a good thing:
if your website can’t be found in a simple query on any major search engine,
nobody will reach it.&lt;/p&gt;
&lt;p&gt;If your website has an international scope, being indexed by Baidu may be
important, as 500 million people probably use it as their browser homepage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="baidu-crawls-way-too-much"&gt;
&lt;h3&gt;Baidu crawls… Way too much.&lt;/h3&gt;
&lt;p&gt;Some nights like tonight, Santa Baidu comes down the chimney and leaves its
marvellous presents in my mailbox.
&lt;strong&gt;Thousands of suspicious operations alerts!&lt;/strong&gt;
Cool, it brought me fifty strange requests per minute during all the night!
And even more impressive, each one is different!&lt;/p&gt;
&lt;p&gt;It starts with a classical &lt;tt class="docutils literal"&gt;/robots.txt&lt;/tt&gt;, the best way to find weak points you
shouldn’t look at.&lt;/p&gt;
&lt;p&gt;And then it starts spamming stupid PHP/ASP/JSP requests.
I never even used one of these!  Baidu, you offend me.
Here’s a tiny sample of what it asks:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/do/reg.php
/wp-content/themes/twentyten/style.css
/lionsky_client/WebHtmlEditor/1_7_2006_1020/Theme/Office_Tinge/WebHtmlEditor.css
/ask
/admin/help/online_help_1.htm
/Providers/HtmlEditorProviders/Fck/fcklinkgallery.aspx
/安装说明.txt
/data/config.js
/jsp/cis4/js/common/CTRSHTMLElement.js
/digg.php
/plugin/backupdb/plugin.xml
/siteserver/login.aspx
/a_d/install/data.sql
/admin/tpls/tpls/main/default/index.tpl
/ThinkPHP/LICENSE.txt
/install/data/sql/db_full.sql
/wcm/app/js/source/wcmlib/WCMConstants.js
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="an-explanation"&gt;
&lt;h2&gt;An explanation&lt;/h2&gt;
&lt;div class="section" id="is-that-so-important"&gt;
&lt;h3&gt;Is that so important?&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;Regular search engine bots don’t do that.  They don’t ask for tens of thousands
of pages in a few hours.  They don’t go to a page that isn’t mentioned
by any other page.&lt;/p&gt;
&lt;p&gt;One could argue that it’s not dangerous since these are just regular
HTTP requests: no code injection, no denial of service, no IP spoofing, etc.
That’s right.  And that’s why it’s even more dangerous: Baidu obviously has
a tremendous catalog of software footprints.  Without a single link to those
pages, it knows exactly where to look to know if you’re running PHP, ASP, JSP,
which libraries, and more important, which version of all these.&lt;/p&gt;
&lt;p&gt;Of course, these data are totally useless for a search engine; except if it’s
able to tell the user whether a website is technically trustworthy.
But that’s very unlikely.  So why all this?&lt;/p&gt;
&lt;p&gt;Baidu doesn’t want to break your website.  It wants to be &lt;em&gt;able&lt;/em&gt; to do it
at any moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-cyberwarfare-weapon"&gt;
&lt;h3&gt;A cyberwarfare weapon?&lt;/h3&gt;
&lt;p&gt;Probably…  It could also be a dissuasive weapon, like nuclear missiles.&lt;/p&gt;
&lt;p&gt;Do you know &lt;a class="reference external" href="http://www.shodanhq.com/"&gt;Shodan&lt;/a&gt;?
It’s a very special search engine.
It allows you to find extremely weak servers.
Especially webcam servers without password or with default ones.&lt;/p&gt;
&lt;p&gt;That’s truly shocking, but you can spy people you don’t know, learn everything
about their life, and they’re not even aware of being filmed.
If you search and hack enough, I guess you can become the administrator
of a few servers across the globe.&lt;/p&gt;
&lt;p&gt;Or you can even control &lt;strong&gt;power plants&lt;/strong&gt;, as they’re proud to mention.
That’s obviously not so easy, but it can be done.
It was done in 2010, when &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Stuxnet"&gt;&amp;quot;someone&amp;quot; partially destroyed an Iranian
nuclear plant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you may know, the US &lt;abbr title="National Security Agency"&gt;NSA&lt;/abbr&gt; &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NSA_ANT_catalog"&gt;exploits such
vulnerabilities and even develops hardware&lt;/a&gt; to make it easier for them
to infiltrate any online computer.&lt;/p&gt;
&lt;p&gt;I honestly don’t have any proof, but I’m sure that China is doing exactly the
same kind of spying &amp;amp; infiltration with tools like Baidu.
I don’t say that Baidu is a covering for illegal government operations.
Maybe all this wasn’t Baidu, but another chinese bot pretending being Baidu.
Or maybe Baidu is simply lead by a bunch of irresponsible hackers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;Block Baidu, as I did.&lt;/p&gt;
&lt;p&gt;In Django, I simply made a middleware.
Add &lt;tt class="docutils literal"&gt;'your_project.middleware.ExcludeSuspiciousRequestsMiddleware',&lt;/tt&gt; to your
&lt;tt class="docutils literal"&gt;MIDDLEWARE_CLASSES&lt;/tt&gt; and put the following in &lt;tt class="docutils literal"&gt;your_project/middleware.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;


&lt;span class="n"&gt;BANNED_REFERERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;http://www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExcludeSuspiciousRequestsMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP_REFERER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;BANNED_REFERERS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;You have been banned from our server. If you think this is a &amp;#39;&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;miscarriage of justice, ask the admin on &amp;#39;&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;&amp;lt;a href=&amp;quot;mailto:%(@)s&amp;quot;&amp;gt;%(@)s&amp;lt;/a&amp;gt;.&amp;#39;&lt;/span&gt;
                &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ADMINS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bertrand Bordage</dc:creator><pubDate>Tue, 23 Sep 2014 00:00:00 +0200</pubDate><guid>tag:blog.bordage.pro,2014-09-23:baidu-illegal-activities/</guid><category>security</category><category>search engine</category></item><item><title>Avoid docker-py</title><link>http://blog.bordage.pro/avoid-docker-py/</link><description>&lt;div class="section" id="whats-docker"&gt;
&lt;h2&gt;What’s Docker?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt; allows you to easily deploy
a web application anywhere without worrying about which OS or libraries are
installed on the server.  That’s it for the original idea.&lt;/p&gt;
&lt;p&gt;But that’s not all.  This simple idea implies a lot of applications.
For instance, it can be used for load balancing
(using tools such as &lt;a class="reference external" href="https://coreos.com/"&gt;CoreOS&lt;/a&gt;)
or to execute untrusted code in a quite secure environment.&lt;/p&gt;
&lt;p&gt;Note that Docker is not perfectly safe for the latter use
(&lt;a class="reference external" href="https://news.ycombinator.com/item?id=7909622"&gt;as stated by the Docker team&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-docker-directly-from-python"&gt;
&lt;h2&gt;How to use Docker directly from Python?&lt;/h2&gt;
&lt;p&gt;Docker is normally called using commands like &lt;tt class="docutils literal"&gt;docker build &lt;span class="pre"&gt;-t&lt;/span&gt; myimage .&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;docker run myimage&lt;/tt&gt;.  But if you script your Docker workflow using Python
like I do, you want to find an easy, reliable and robust way to call these
commands inside Python.&lt;/p&gt;
&lt;p&gt;You therefore have two solutions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/docker/docker-py"&gt;docker-py&lt;/a&gt;, the official
Python binding from the Docker team;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen"&gt;subprocess.Popen&lt;/a&gt;,
the good old way of calling an external program from Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="that-seemed-obvious"&gt;
&lt;h3&gt;That seemed obvious…&lt;/h3&gt;
&lt;p&gt;At first, docker-py looks very promising.&lt;/p&gt;
&lt;p&gt;Not only because it is brought by a team that did a wonderful job on Docker
during the past year, but also because it uses the Docker Remote API.
That means we should be able to easily control Docker through the network
without leaving our comfortable Python.  We can even change the API version
to communicate with an outdated version of Docker!&lt;/p&gt;
&lt;p&gt;Another good point: it seems that the syntax is very close to the regular
&lt;tt class="docutils literal"&gt;docker [command]&lt;/tt&gt;.  You just have to initialize a connection with the
Docker daemon, and there you go! &lt;tt class="docutils literal"&gt;docker build &lt;span class="pre"&gt;-t&lt;/span&gt; myimage .&lt;/tt&gt; becomes
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c.build('.',&lt;/span&gt; 'myimage')&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;docker commit mycontainer&lt;/tt&gt; becomes
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c.commit('mycontainer')&lt;/span&gt;&lt;/tt&gt;, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="until-you-discover-the-inconsistent-missing-or-broken-things"&gt;
&lt;h3&gt;…until you discover the inconsistent, missing, or broken things&lt;/h3&gt;
&lt;div class="section" id="inconsistencies"&gt;
&lt;h4&gt;Inconsistencies&lt;/h4&gt;
&lt;p&gt;And it doesn’t take long.  The first thing you realize is that the syntax is
very different from Docker.  You thought &lt;tt class="docutils literal"&gt;docker run myimage&lt;/tt&gt; would be
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c.run('myimage')&lt;/span&gt;&lt;/tt&gt;?  No, that was too easy.
It’s &lt;tt class="docutils literal"&gt;ctr = &lt;span class="pre"&gt;c.create_container('myimage')&lt;/span&gt;&lt;/tt&gt; then &lt;tt class="docutils literal"&gt;c.start(ctr)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I’m not a docker expert, so I guess there’s a good reason for this choice.
But I don’t think there is a good reason for the following choices.&lt;/p&gt;
&lt;p&gt;Second annoyance, half of the commands have different names from their Docker
equivalent.  Some even are split in two.  Nothing terrible here, but still
a bit annoying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="missing-features"&gt;
&lt;h4&gt;Missing features&lt;/h4&gt;
&lt;p&gt;Now come the real issues.&lt;/p&gt;
&lt;p&gt;Some Docker features can’t be used from docker-py.  One has especially driven
me crazy: &lt;tt class="docutils literal"&gt;docker run &lt;span class="pre"&gt;--rm&lt;/span&gt; […]&lt;/tt&gt;.  With this &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--rm&lt;/span&gt;&lt;/tt&gt;, Docker will
automatically remove the container when its process has finished (but we
explicitly need to remove it if we used &lt;tt class="docutils literal"&gt;docker kill&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;One would argue: &amp;quot;you just have to kill the container &lt;em&gt;then&lt;/em&gt; remove it&amp;quot;.
Of course, that’s what I did.  But &lt;em&gt;sometimes&lt;/em&gt;, it doesn’t work perfectly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="broken-things"&gt;
&lt;h4&gt;Broken things&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;And here comes the madness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An &lt;tt class="docutils literal"&gt;APIError&lt;/tt&gt; is randomly raised by docker-py, stating that the container
can’t be removed because it’s still in use or still moving.  I guess it’s
because docker-py sends a kill request without waiting the end of the real
killing, so sometimes removal happens before the end of kill.  Oddly enough,
I noticed the containers were in fact removed even if an error occurred.
I abhor that, but I put a &lt;tt class="docutils literal"&gt;try&lt;/tt&gt; &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; around &lt;tt class="docutils literal"&gt;c.remove_container&lt;/tt&gt;
to ignore the issue.&lt;/p&gt;
&lt;p&gt;But wait!  That’s not all.  &lt;tt class="docutils literal"&gt;c.kill&lt;/tt&gt; only works with running containers,
otherwise it raises an &lt;tt class="docutils literal"&gt;APIError&lt;/tt&gt;.  Docker has
some tools to inspect a container and therefore know whether it’s running or
not.  I thought I could detect when the container is running and kill it
if it’s true.  But no, according to Docker, the process is always running (in
fact, it’s a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Zombie_process"&gt;zombie process&lt;/a&gt;).
And the line after, &lt;tt class="docutils literal"&gt;c.kill&lt;/tt&gt; tells me it’s not running… So you have to
add another &lt;tt class="docutils literal"&gt;try&lt;/tt&gt; &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; around &lt;tt class="docutils literal"&gt;c.kill&lt;/tt&gt;.
We also need to add a &lt;tt class="docutils literal"&gt;c.wait(ctr)&lt;/tt&gt; in order to wait for zombie process to
finish, between &lt;tt class="docutils literal"&gt;c.kill&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;c.remove_container&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to get the output of something like this
with a time limit of 2 seconds:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --rm ubuntu:14.04 python3 -c [some_code_here]
&lt;/pre&gt;
&lt;p&gt;And ended up with something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;docker&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docker.errors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIError&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimeoutException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;time_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c"&gt;# From http://stackoverflow.com/a/601168/1576438&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;signal_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;TimeoutException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Timed out!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1.9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ubuntu:14.04&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="s"&gt;&amp;#39;python3 -c &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# FIXME: Escape this&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;time_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;TimeoutException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;APIError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;APIError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;  &lt;span class="c"&gt;# This should work anyway (and I don’t understand why)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;


&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;print(&amp;#39;test1&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;while True: print(&amp;#39;test2&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At least I had a working version!  Docker was still throwing me some random
warning, but I got what I wanted.&lt;/p&gt;
&lt;p&gt;But then something wonderful happened! A docker-py update!  Version 0.3.2,
that should be a few bugfixes.  In my case it wasn’t, I had different bugs.
First, the default API number switched from 1.9 to 1.12.  That’s a major
change, not something you do in a security/bugfix release!  docker-py 0.4.0 was
released one month later, they could have waited…  Anyways, updating to 0.3.2
broke everything, especially &lt;tt class="docutils literal"&gt;c.logs&lt;/tt&gt;.  Forcing the API version in
&lt;tt class="docutils literal"&gt;docker.Client&lt;/tt&gt; to 1.9 worked, but I don’t understand why since
I was using Docker 1.0.0, and therefore API version 1.12.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-solutions-are-always-the-best"&gt;
&lt;h3&gt;Simple solutions are always the best&lt;/h3&gt;
&lt;p&gt;After losing 3 full days digging the several issues, I decided to throw
docker-py away in favour of a classical &lt;tt class="docutils literal"&gt;subprocess.Popen&lt;/tt&gt;.  It took me an
hour to get exactly what I wanted.&lt;/p&gt;
&lt;p&gt;And it consists in fewer lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kill_and_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;kill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;docker &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctr_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctr_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some_random_name&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SIGKILL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;--rm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctr_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;&amp;#39;ubuntu:14.04&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
              &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;# Happens on timeout&lt;/span&gt;
        &lt;span class="c"&gt;# We have to kill the container since it still runs&lt;/span&gt;
        &lt;span class="c"&gt;# detached from Popen and we need to remove it after because&lt;/span&gt;
        &lt;span class="c"&gt;# --rm is not working on killed containers&lt;/span&gt;
        &lt;span class="n"&gt;kill_and_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctr_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;


&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;print(&amp;#39;test1&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;while True: print(&amp;#39;test2&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you only want to control Docker locally, don’t use docker-py.
Trust me.&lt;/p&gt;
&lt;p&gt;If you want to control a remote Docker from Python, I guess you have no option
but to use docker-py.  Expect a lot of pain if you need some advanced features.&lt;/p&gt;
&lt;p&gt;What’s even more disappointing is that
&lt;strong&gt;Docker may also be the cause of my problems&lt;/strong&gt;.
Because there are probably several issues here.  I would say:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="62%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Problem&lt;/th&gt;
&lt;th class="head"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Docker API inconsistencies
compared to
&lt;tt class="docutils literal"&gt;docker [command]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;docker kill&lt;/tt&gt; doesn’t complain when killing
non-running containers.  Why is the API
returning a 500 error?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bad Docker API documentation&lt;/td&gt;
&lt;td&gt;Why can I use the API version from an older
Docker than the installed one?  Why isn’t
&lt;tt class="docutils literal"&gt;c.logs&lt;/tt&gt; working the same between 1.9 and
1.12 when nothing mentions a change in the
API changelog?  Or is it because of docker-py?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;docker-py inconsistencies&lt;/td&gt;
&lt;td&gt;No direct equivalent of &lt;tt class="docutils literal"&gt;docker run&lt;/tt&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bad docker-py release
management&lt;/td&gt;
&lt;td&gt;Look at the number of changes for 0.3.2
in the &lt;a class="reference external" href="https://github.com/docker/docker-py/blob/429654b4eb632357011f9683d4d12fcfe974f41b/ChangeLog.md"&gt;docker-py changelog&lt;/a&gt; and
compare it with 0.4.0…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bertrand Bordage</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 +0200</pubDate><guid>tag:blog.bordage.pro,2014-07-27:avoid-docker-py/</guid><category>python</category><category>docker</category><category>libraries</category></item></channel></rss>